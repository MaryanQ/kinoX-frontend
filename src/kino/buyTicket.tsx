import React, { useState } from "react";
import { Booking, Seat } from "../services/apiFacade"; // Import BookingDTO if it's defined in a separate file

interface BuyTicketsProps {
  totalPrice: number;
  selectedSeats: Seat[]; // Assuming Seat interface is imported
  setSelectedSeats: React.Dispatch<React.SetStateAction<Seat[]>>;
}

const BuyTickets: React.FC<BuyTicketsProps> = ({
  totalPrice,
  selectedSeats,
  setSelectedSeats,
}) => {
  const [paymentSuccessful, setPaymentSuccessful] = useState<boolean>(false);
  const [customerName, setCustomerName] = useState<string>("");
  const [customerNumber, setCustomerNumber] = useState<string>("");

  const handlePay = () => {
    // Check if any seats are selected
    if (selectedSeats.length === 0) {
      console.error("No seats selected.");
      return; // Exit the function if no seats are selected
    }

    // Simulate payment processing
    // You can replace this with your actual payment processing logic
    setTimeout(() => {
      // Payment successful
      setPaymentSuccessful(true);

      // Create BookingDTO objects for each selected seat
      const bookingsData: Booking[] = selectedSeats.map((seat) => ({
        id: 0, // Placeholder value, since it will be generated by the backend
        customerName: customerName,
        customerNumber: customerNumber,
        seatId: seat.id,
        movieId: 456, // Replace with actual movie ID
        price: seat.price, // Use the seat's price
        bookingTime: new Date().toISOString(), // Use current time as booking time
      }));

      // Send the bookingData objects to your backend API
      console.log("Bookings Data:", bookingsData);

      // Clear selected seats to mark them as booked
      setSelectedSeats([]);
    }, 2000); // Simulate a 2-second delay for payment processing
  };

  return (
    <div className="buy-tickets-container">
      <h2>Payment</h2>

      {/* Basket or total amount box */}
      <div className="basket-box">
        <h3 className="basket-heading">Total Amount</h3>
        <p className="amount-paragraph">Amount to Pay: ${totalPrice}</p>
      </div>

      {/* Input field for customer name */}
      {!paymentSuccessful && (
        <div className="customer-input">
          <label htmlFor="customerName">Customer Name:</label>
          <input
            type="text"
            id="customerName"
            value={customerName}
            onChange={(e) => setCustomerName(e.target.value)}
          />
        </div>
      )}

      {/* Input field for customer number */}
      {!paymentSuccessful && (
        <div className="customer-input">
          <label htmlFor="customerNumber">Customer Number:</label>
          <input
            type="text"
            id="customerNumber"
            value={customerNumber}
            onChange={(e) => setCustomerNumber(e.target.value)}
          />
        </div>
      )}

      {/* Pay button */}
      {!paymentSuccessful && (
        <button className="pay-button" onClick={handlePay}>
          Pay
        </button>
      )}

      {/* Display a message if payment is successful */}
      {paymentSuccessful && (
        <p className="payment-success-message">Payment successful!</p>
      )}
    </div>
  );
};

export default BuyTickets;
